#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESPAsyncWebServer.h>
#include <Arduino.h>
#include <Hash.h>
#include <ESPAsyncTCP.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <FS.h>
#include <SPI.h>

#include "index.h"
#include "wifi.h"

#define DHTPIN 5
#define DHTTYPE DHT11

#define PARAM_TEMP "temp"
#define PARAM_TIMEPLAN "timeplan"

#define FILE_NAME "/timeplan.json"

File myfile;

DHT dht(DHTPIN, DHTTYPE);
AsyncWebServer server(80);

boolean InitalizeFileSystem() {
  bool initok = false;
  initok = SPIFFS.begin();
  if (!(initok))  // Format SPIFS, of not formatted. - Try 1
  {
    Serial.println("SPIFFS Dateisystem formatiert.");
    SPIFFS.format();
    initok = SPIFFS.begin();
  }
  if (!(initok))  // Format SPIFS. - Try 2
  {
    SPIFFS.format();
    initok = SPIFFS.begin();
  }
  if (initok) {
    Serial.println("SPIFFS ist  OK");
  } else {
    Serial.println("SPIFFS ist nicht OK");
  }
  return initok;
}

String processor(const String &var) {
  Serial.println(var);
  if (var == "TEMPERATURE") {
    return "";//String(dht.readTemperature());
  } else if (var == "HUMIDITY") {
    return "";//String(dht.readHumidity());
  } else if (var == "IPADRESS") {
    const IPAddress &ipAddress = WiFi.localIP();
    return String(ipAddress[0]) + "." + String(ipAddress[1]) + "." + String(ipAddress[2]) + "." + String(ipAddress[3]);
  } else if (var == "WIFI") {
    return String(ssid);
  }
  return String();
}

void setTemperature() {
}

void action(AsyncWebServerRequest *request) {
  Serial.println("ACTION!");

  myfile = SPIFFS.open("/usage_log.csv", "w");

  int params = request->params();
  for (int i = 0; i < params; i++) {
    AsyncWebParameter *p = request->getParam(i);
    Serial.printf("POST[%s]: %s\n", p->name().c_str(), p->value().c_str());
    myfile.printf("POST[%s]: %s\n", p->name().c_str(), p->value().c_str());
  }
  myfile.close();
  request->send_P(200, "text/plain", "success");
}

void setup() {
  Serial.begin(115200);
  while (!Serial)
    delay(20);

  SPI.begin();
  bool Result = InitalizeFileSystem();
  if (!(SPIFFS.exists(FILE_NAME))) {
    myfile = SPIFFS.open(FILE_NAME, "w");
    if (!myfile) {
      Serial.println("Fehler beim schreiben der Datei");
    }
    myfile.close();
  }

  WiFi.begin(ssid, password);  //Connect to your WiFi router
  Serial.println("");

  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  //If connection successful show IP address in serial monitor
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());  //IP address assigned to your ESP

  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
    Serial.println("/");
    request->send_P(200, "text/html", index_html, processor);
  });
  server.on("/temperature", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send_P(200, "text/plain", String(dht.readTemperature()).c_str());
  });
  server.on("/humidity", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send_P(200, "text/plain", String(dht.readHumidity()).c_str());
  });

  server.on("/set", HTTP_GET, [](AsyncWebServerRequest *request) {
    String inputMessage;
    String inputParam;
    if (request->hasParam(PARAM_TEMP)) {
      inputMessage = request->getParam(PARAM_TEMP)->value();
      inputParam = PARAM_TEMP;

    } else {
      inputMessage = "No message sent";
      inputParam = "none";
      request->send(200, "text/plain", "OK");
    }

    request->send(200, "text/plain", "OK");
  });

  server.on("/timeplan", HTTP_POST, action);

  server.begin();  //Start server
  Serial.println("HTTP server started");

  dht.begin();
}

void loop() {
  // put your main code here, to run repeatedly:
  //server.handleClient();
}
